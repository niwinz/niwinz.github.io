<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>niwi.nz - Andrey Antukh</title><link>https://niwi.nz/</link><description></description><lastBuildDate>Wed, 01 Mar 2017 00:00:00 +0000</lastBuildDate><item><title>Why GraphQL uses string based templates for queries?</title><link>https://niwi.nz/2017/03/01/why-graphql-uses-string-based-templates-for-queries/</link><description>&lt;p&gt;I've followed the graphql development from its public announcement
and at first I had my doubts about it, but over time I found the main
idea very interesting. However I could not stop asking myself: &lt;strong&gt;why
string based templates are still used for representing the query language?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since the usage …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2017-03-01:/2017/03/01/why-graphql-uses-string-based-templates-for-queries/</guid><category>blog</category><category>graphql</category><category>rant</category><category>clojure</category></item><item><title>Application architecture and state management with react based applications.</title><link>https://niwi.nz/2016/04/03/application-architecture-and-state-management-with-react-based-applications/</link><description>&lt;p&gt;This is a brief summary of the architectural decisions that I have taken when I
have started the development of &lt;a href="https://github.com/uxbox/uxbox"&gt;uxbox&lt;/a&gt; and with time I found that the result
is scaling pretty well for relatively big project, so I decided to write about it.&lt;/p&gt;
&lt;p&gt;I will use ClojureScript as base …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Sun, 03 Apr 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2016-04-03:/2016/04/03/application-architecture-and-state-management-with-react-based-applications/</guid><category>blog</category><category>rum</category><category>react</category><category>clojurescript</category><category>architecture</category></item><item><title>Get current timestamp in PostgreSQL</title><link>https://niwi.nz/2016/03/28/get-current-timestamp-in-postgresql/</link><description>&lt;p&gt;I'm pretty sure that almost everyone that have used PostgreSQL knows the &lt;code&gt;now()&lt;/code&gt;
function. Its purpose is mostly obvious: return the current timestamp or at least
its name indicates that.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;test=#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="go"&gt;              now&lt;/span&gt;
&lt;span class="go"&gt;-------------------------------&lt;/span&gt;
&lt;span class="go"&gt; 2016-03-27 12:54:50.449097+00&lt;/span&gt;
&lt;span class="go"&gt;(1 row)&lt;/span&gt;

&lt;span class="gp"&gt;test=#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="go"&gt;              now&lt;/span&gt;
&lt;span class="go"&gt;-------------------------------&lt;/span&gt;
&lt;span class="go"&gt; 2016-03-27 12:58:52 …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Mon, 28 Mar 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2016-03-28:/2016/03/28/get-current-timestamp-in-postgresql/</guid><category>blog</category><category>postgresql</category><category>time</category></item><item><title>Best practices storing time data on the database</title><link>https://niwi.nz/2016/03/26/best-practices-storing-time-data-on-the-database/</link><description>&lt;p&gt;There is my personal list of best practices handling with time
related data and its persistence. I assume they are for PostgreSQL
in first time but that recommendations are almost the same for
other databases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set your database timezone to &lt;code&gt;UTC&lt;/code&gt; or at least set the connection
  timezone to &lt;code&gt;UTC …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Sat, 26 Mar 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2016-03-26:/2016/03/26/best-practices-storing-time-data-on-the-database/</guid><category>blog</category><category>postgresql</category><category>time</category></item><item><title>Implementing OCC (Optimistic Concurrency Control) on the database</title><link>https://niwi.nz/2016/03/24/implementing-occ-on-database/</link><description>&lt;p&gt;This is a simple tip for implement &lt;a href="https://en.wikipedia.org/wiki/Optimistic_concurrency_control"&gt;OCC&lt;/a&gt; directly on the database and so
avoiding additional overhead that this can imply doing that at the application
level.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;OCC&lt;/code&gt; mechanism mainly consists in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;having an additional column called &lt;code&gt;version&lt;/code&gt; by convention.&lt;/li&gt;
&lt;li&gt;check if the incoming modification has the same version …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2016-03-24:/2016/03/24/implementing-occ-on-database/</guid><category>blog</category><category>postgresql</category><category>concurrency</category></item><item><title>Using reduce functions for state transformations</title><link>https://niwi.nz/2015/11/28/using-reduce-functions-for-state-transformations/</link><description>&lt;p&gt;Most of the times I found clojurescript web applications mixing UI code with
state transformation logic, that inherently tends to create a lot of coupling
between them.&lt;/p&gt;
&lt;p&gt;I think that can be solved very easily using some kind of named events
instead of direct state manipulation, being in server-client like …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Sat, 28 Nov 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2015-11-28:/2015/11/28/using-reduce-functions-for-state-transformations/</guid><category>blog</category><category>clojurescript</category><category>state management</category><category>state</category><category>reactjs</category><category>multimethods</category></item><item><title>Introduction to lenses and how to use them instead of cursors</title><link>https://niwi.nz/2015/11/26/introduction-to-lenses-and-how-to-use-them-instead-of-cursors/</link><description>&lt;p&gt;The cursors abstraction is so far the most used approach for delimit the vision
of the global state for react components in ClojureScript applications. But that
also has a great amount of downsides that should be considered before using it.&lt;/p&gt;
&lt;p&gt;Here is a little list of the most important for …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Thu, 26 Nov 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2015-11-26:/2015/11/26/introduction-to-lenses-and-how-to-use-them-instead-of-cursors/</guid><category>blog</category><category>clojurescript</category><category>state</category><category>cursors</category><category>reactjs</category><category>lens</category></item><item><title>Password hash update policy in Clojure web applications</title><link>https://niwi.nz/2015/10/31/password-hash-update-policy-in-clojure-web-applications/</link><description>&lt;p&gt;Choice a strong password hasher for the modern web application is not very
complicated thing. At this moment the two most used algorithms are &lt;a href="https://en.wikipedia.org/wiki/PBKDF2"&gt;&lt;strong&gt;pbkdf2&lt;/strong&gt;&lt;/a&gt;
and &lt;a href="https://en.wikipedia.org/wiki/Bcrypt"&gt;&lt;strong&gt;bcrypt&lt;/strong&gt;&lt;/a&gt;, so probably you should use one of them or any of their variants
such as &lt;strong&gt;bcrypt+sha512&lt;/strong&gt; (buddy's default) or &lt;strong&gt;pbkdf2+sha256&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Sat, 31 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2015-10-31:/2015/10/31/password-hash-update-policy-in-clojure-web-applications/</guid><category>blog</category><category>clojure</category><category>security</category><category>auth</category></item><item><title>Generating a secure certificate request with OpenSSL</title><link>https://niwi.nz/2015/03/25/generate-secure-certificate-request-with-openssl/</link><description>&lt;p&gt;This is a little cheat sheet for personal use on how generate a secure certificate
request using openssl.&lt;/p&gt;
&lt;p&gt;The first step is creating a strong private key. At this moment the 2048bits is the recommended
key lenght. Security experts are projecting that 2048 bits will be sufficient for commercial use …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Wed, 25 Mar 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2015-03-25:/2015/03/25/generate-secure-certificate-request-with-openssl/</guid><category>blog</category><category>security</category><category>ssl</category></item><item><title>The expression problem</title><link>https://niwi.nz/2015/03/09/expression-problem/</link><description>&lt;p&gt;The &lt;em&gt;Expression problem&lt;/em&gt; is a new name to an old problem.&lt;/p&gt;
&lt;p&gt;In my opinon, you probably do not care about it until know it. This article tries make a little
and practical introduction to expression problem situations and explain how them can be elegantly
solved using clojure polymorphic constructions. Concretely …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2015-03-09:/2015/03/09/expression-problem/</guid><category>blog</category><category>clojure</category></item><item><title>Multimethods with python3</title><link>https://niwi.nz/2015/01/10/clojure-like-multimethods-in-python3/</link><description>&lt;p&gt;After using clojure for some time on my hobby projects, I find clojure's multimethods
feature really exciting. In popular words, multimethods provides "polymorphism a la carte".&lt;/p&gt;
&lt;p&gt;I thought it was funny to try implement that using python3. Amazingly, the result seems
very expressive and maybe it is can be more …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Sat, 10 Jan 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2015-01-10:/2015/01/10/clojure-like-multimethods-in-python3/</guid><category>blog</category><category>clojure</category><category>python</category></item><item><title>Auto currying with clojure</title><link>https://niwi.nz/2014/02/03/auto-currying-with-clojure/</link><description>&lt;p&gt;Currying, is one of the much others featues that haskell implements nativelly but
is not widelly extended on lisp like languages. But thanks to the power of lisp,
it should be possible to extend the language so that is able to support autocurry.&lt;/p&gt;
&lt;p&gt;This is my simple experiment using clojure …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Mon, 03 Feb 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2014-02-03:/2014/02/03/auto-currying-with-clojure/</guid><category>blog</category><category>clojure</category><category>lisp</category></item><item><title>Recursive queries with PostgreSQL</title><link>https://niwi.nz/2013/10/26/recursive-queries-postgresql/</link><description>&lt;p&gt;Sometimes we need store some graph/tree structures in your relational database (eg, postgresql)
and query childs of some top level node of your stored tree.&lt;/p&gt;
&lt;p&gt;This problem, has various soultions.&lt;/p&gt;
&lt;p&gt;The most simple way to get all child nodes of one top level node is execute query for each …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Sat, 26 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2013-10-26:/2013/10/26/recursive-queries-postgresql/</guid><category>blog</category><category>postgresql</category></item><item><title>Converting between clojure data structures and java collections</title><link>https://niwi.nz/2013/10/13/converting-between-clojure-data-structures-and-java-collections/</link><description>&lt;p&gt;In some situations you need convert some data structures of clojure (like vectors, maps or sets)
to java collections and vice versa.&lt;/p&gt;
&lt;p&gt;This problem has simple solution: clojure data structures implements &lt;strong&gt;java.util.Collection&lt;/strong&gt; interface
and uses it constructor for make conversion to corresponding types.&lt;/p&gt;
&lt;p&gt;As first example, you can …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2013-10-13:/2013/10/13/converting-between-clojure-data-structures-and-java-collections/</guid><category>blog</category><category>clojure</category><category>jvm</category></item><item><title>Optimizing server for heavy load wsgi application</title><link>https://niwi.nz/2013/03/13/optimizing-server-for-heavy-load-django-application/</link><description>&lt;p&gt;Many times, we only care to optimize the database, nginx or WSGI server, and often is more than enough.
But, when you have a web application that must be able to scale and support over 2000 concurrent users,
this is totally insufficient.&lt;/p&gt;
&lt;p&gt;Here comes the part where we have to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Wed, 13 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2013-03-13:/2013/03/13/optimizing-server-for-heavy-load-django-application/</guid><category>blog</category><category>django</category><category>nginx</category><category>gunicorn</category></item><item><title>Table partitioning with PostgreSQL</title><link>https://niwi.nz/2013/03/06/table-partitioning-with-postgresql/</link><description>&lt;p&gt;PostgreSQL supports partitioning via table inheritance. So the partitioning is made in such a way that every child table inherits single parent table. Parent table is empty and it exists just to describe the whole data set.&lt;/p&gt;
&lt;p&gt;The real benefit of table partitioning is a performance improvement with tables with …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Wed, 06 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2013-03-06:/2013/03/06/table-partitioning-with-postgresql/</guid><category>blog</category><category>postgresql</category></item><item><title>Table inheritance with PostgreSQL</title><link>https://niwi.nz/2013/03/03/table-inheritance-with-postgresql/</link><description>&lt;p&gt;Table inheritance is one of the features in PostgreSQL has impressed me a lot, I have
discovered its potential recently, research on partitioning tables (I explain it on the next article).
The idea of this article is to see how it works, and how we can take advantage of this …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Sun, 03 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2013-03-03:/2013/03/03/table-inheritance-with-postgresql/</guid><category>blog</category><category>postgresql</category></item><item><title>Index usage statistics in PostgreSQL</title><link>https://niwi.nz/2013/02/19/index-usage-stats-in-postgresql/</link><description>&lt;p&gt;This is a simple tip for obtain statistic information about indexes usage on a
current database. All information is obtained from some views exposed by PostgreSQL,
and populated by the Statistics Collector.&lt;/p&gt;
&lt;p&gt;Tips of this post only exposes some facility for obtain these information (filtered
by current database and exclude …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Tue, 19 Feb 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2013-02-19:/2013/02/19/index-usage-stats-in-postgresql/</guid><category>blog</category><category>postgresql</category></item><item><title>Python and Node performance tests</title><link>https://niwi.nz/2013/02/18/python-node-http-performance/</link><description>&lt;p&gt;This is another benchmark for view performance of python on the web. The main idea is
to see python3 performance compared to python2 serving simple wsgi app.&lt;/p&gt;
&lt;p&gt;Also compared with nodejs performance, performing the same task.&lt;/p&gt;
&lt;p&gt;For benchmarks are used these software:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;uwsgi-1.4.5 + python-3.3.0&lt;/li&gt;
&lt;li&gt;uwsgi-1.4 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Mon, 18 Feb 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2013-02-18:/2013/02/18/python-node-http-performance/</guid><category>bench</category><category>python</category><category>wsgi</category><category>nodejs</category></item><item><title>Show database, table and indexes size on PostgreSQL</title><link>https://niwi.nz/2013/02/17/postgresql-database-table-indexes-size/</link><description>&lt;p&gt;Many times I have needed show how spaces is used on my databases, tables or indexes. Here I will try to
explain in a concise and simple way to obtain this useful information.&lt;/p&gt;
&lt;div class="section" id="show-database-size"&gt;
&lt;h2&gt;Show database size&lt;/h2&gt;
&lt;p&gt;The simples way to show a database size, is executing this query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pg …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Sun, 17 Feb 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2013-02-17:/2013/02/17/postgresql-database-table-indexes-size/</guid><category>blog</category><category>postgresql</category></item><item><title>Show replication status in PostgreSQL</title><link>https://niwi.nz/2013/02/16/replication-status-in-postgresql/</link><description>&lt;p&gt;This is a small tip to view the replication status of slave postgresql servers. The simplest way
to see the replication state on a master server is executing this query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;client_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sent_location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;write_location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;flush_location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;replay_location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pg_stat_replication&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This query can output …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Sat, 16 Feb 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2013-02-16:/2013/02/16/replication-status-in-postgresql/</guid><category>blog</category><category>postgresql</category></item><item><title>Order by subquery array with PostgreSQL</title><link>https://niwi.nz/2012/10/21/order-by-subquery-or-array-with-postgresql/</link><description>&lt;p&gt;Sometimes we need to get a certain number of elements of the database by its primary key and another field. We have the values and the order in which we want to get the data.&lt;/p&gt;
&lt;p&gt;To see examples, create a test table and insert sample values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;test …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Sun, 21 Oct 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2012-10-21:/2012/10/21/order-by-subquery-or-array-with-postgresql/</guid><category>blog</category><category>postgresql</category></item><item><title>Boost.Python converter for C++11 tuple.</title><link>https://niwi.nz/2012/09/15/boost.python-convertes-for-cpp11-tuple/</link><description>&lt;p&gt;With c++11 certain improvements have been introduced, some improvements are for language and some for the standard library. One of the interesting things is the library of tuples.&lt;/p&gt;
&lt;p&gt;With tuples can define fixed-size containers with heterogeneous types. Boost.Python by default no have automatic conversion to C++11 tuple …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2012-09-15:/2012/09/15/boost.python-convertes-for-cpp11-tuple/</guid><category>blog</category><category>cpp</category><category>cpp11</category><category>python</category></item><item><title>Nested functions and lambdas on C++11</title><link>https://niwi.nz/2012/09/09/simple-example-of-nested-functions-and-lambda-on-cpp11/</link><description>&lt;p&gt;With dynamic languages like Python, Ruby or javascript, we are quite used to seeing a function can return another function defined within the first (which by definition is called nested function or closure). Also, we are accustomed to using Anonymos blocks of code, or lambdas ie. Concepts are quite common …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Sun, 09 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2012-09-09:/2012/09/09/simple-example-of-nested-functions-and-lambda-on-cpp11/</guid><category>blog</category><category>cpp</category><category>cpp11</category></item><item><title>Introducción a boost::python con python3</title><link>https://niwi.nz/2012/09/07/introduccion-a-boost.python/</link><description>&lt;p&gt;Hay varias maneras de extender python con lenguajes de mas bajo nivel (C / C++). Entre ellas la oficial, con la api de C estandar. Tambien existen alternativas como cython que permiten traducir código python a C (para mas información mirar la documentación oficial).&lt;/p&gt;
&lt;p&gt;La idea de este articulo (igual, posteriormente …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Fri, 07 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2012-09-07:/2012/09/07/introduccion-a-boost.python/</guid><category>blog</category><category>python</category><category>python3</category><category>c++</category><category>boost</category></item><item><title>Dynamic inheritance with python3</title><link>https://niwi.nz/2012/09/06/dinamic-inheritance-with-python3/</link><description>&lt;p&gt;I've been experimenting in my spare time with metaclasses in python3 and I had an idea (for possible use). I need an instance of an object inherits from several mixins, but I will not declare the class.&lt;/p&gt;
&lt;p&gt;When you need many combinations of these mixins, you have to create a …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Thu, 06 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2012-09-06:/2012/09/06/dinamic-inheritance-with-python3/</guid><category>blog</category><category>python</category><category>python3</category><category>metaprogramming</category></item><item><title>Como python administra la memoria al usar list()</title><link>https://niwi.nz/2011/06/11/como-python-administra-la-memoria-al-usar-list/</link><description>&lt;p&gt;En python, tenemos varios contenedores de variables, y en este caso hablaremos de tuplas y listas. Y aveces nos surgen las dudas de como administra python la memoria a la hora de conversión de una tupla a una lista. O mejor dicho, que cuando convertimos de una tupla a una …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Sat, 11 Jun 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2011-06-11:/2011/06/11/como-python-administra-la-memoria-al-usar-list/</guid><category>blog</category><category>python</category></item><item><title>Herencia multiple y super() en python</title><link>https://niwi.nz/2011/06/09/herencia-multiple-y-super-en-python/</link><description>&lt;p&gt;Se que hay mucha polemica y muchos debates respeto a la herencia multiple, algunos estan a favor y otros como lo mas habitual, en contra. Seguramente todos tendran sus razones, todas dignas de ser tomadas en cuenta. La principal critica es que incorpora una complejidad al lenguaje y como tratar …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Thu, 09 Jun 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2011-06-09:/2011/06/09/herencia-multiple-y-super-en-python/</guid><category>blog</category><category>python</category></item><item><title>First y Last postgresql aggregates y como usarlos en django.</title><link>https://niwi.nz/2011/06/07/first-y-last-postgresql-aggregates-y-como-usarlos/</link><description>&lt;p&gt;Muchas veces nos encontramos en la situacion, cuando necesitamos sacar una lista ordenada de ultimos elementos (heterogeneos) agrupado por una "foreign key", y no sere de menos. Investigando y probando sobre el ORM de Django, a ver si se podria hacer algo, y ya perdidas todas la esperanzas me he …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Antukh</dc:creator><pubDate>Tue, 07 Jun 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:niwi.nz,2011-06-07:/2011/06/07/first-y-last-postgresql-aggregates-y-como-usarlos/</guid><category>blog</category><category>postgresql</category><category>django</category></item></channel></rss>